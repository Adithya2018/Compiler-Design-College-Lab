/**
 * File: ActivityMonitor.js
 * Owning Team: POP/AuthZeN
 *
 * This file is automaticaly generated by compiling the ActivityMonitor.ts file and should not
 * be manually updated except to maintain this comment. All code changes should be made in the
 * typescript file and manually compiled.  The product from that process should be used to replace
 * this file.
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var IssoCookieMissingError = (function (_super) {
    __extends(IssoCookieMissingError, _super);
    function IssoCookieMissingError() {
        var _this = _super.call(this, "" + IssoCookieMissingError.message) || this;
        _this.__proto__ = IssoCookieMissingError.prototype;
        return _this;
    }
    IssoCookieMissingError.message = 'Error: Idle tracking cookie is missing.';
    return IssoCookieMissingError;
}(Error));
var IssoPolicySettings = (function () {
    function IssoPolicySettings(cookieValue) {
        this.Delimiter = ",";
        var parts = cookieValue.split(this.Delimiter);
        if (parts.length == 5) {
            this.WarnAfter = Number(parts[1]);
            this.SignOutAfter = Number(parts[2]);
            this.WarnAt = Number(parts[3]);
            this.SignOutAt = Number(parts[4]);
        }
        else {
            throw new Error();
        }
    }
    IssoPolicySettings.prototype.AreConsistent = function () {
        var valid = true;
        if (this.WarnAfter == 0 || this.SignOutAfter == 0 || this.WarnAt == 0 || this.SignOutAt == 0) {
            valid = false;
        }
        else if (this.WarnAfter >= this.SignOutAfter) {
            valid = false;
        }
        else if (this.WarnAt >= this.SignOutAt) {
            valid = false;
        }
        return valid;
    };
    IssoPolicySettings.prototype.Update = function () {
        var currentTime = Date.now();
        this.WarnAt = currentTime + (this.WarnAfter * 1000);
        this.SignOutAt = currentTime + (this.SignOutAfter * 1000);
    };
    IssoPolicySettings.prototype.BuildCookieValue = function () {
        var cookieValue = String(true) + this.Delimiter +
            String(this.WarnAfter) + this.Delimiter +
            String(this.SignOutAfter) + this.Delimiter +
            String(this.WarnAt) + this.Delimiter +
            String(this.SignOutAt);
        return cookieValue;
    };
    return IssoPolicySettings;
}());
var IdleSessionActivityMonitor = (function () {
    function IdleSessionActivityMonitor() {
        var _this = this;
        this.IssoCookieName = "isso";
        this.HostDomain = document.location.hostname.split(".").slice(-2).join(".");
        this.warnDialogId = 'SPWarnDialog';
        this.warnDialogIframeId = 'SPWarnDialogIframe';
        this.skew = 1 * 1000;
        this.warningVisible = false;
        this.HandleClick = function () {
            if (_this.warningVisible) {
                _this.DismissWarning();
            }
            else {
                IdleSessionActivityMonitor.LogIssoActivity();
            }
        };
        this.topDocument = window.top.document;
        window.addEventListener('click', IdleSessionActivityMonitor.LogIssoActivity);
        this.InitializeWarningDialog();
    }
    Object.defineProperty(IdleSessionActivityMonitor, "EncodedSignBackInUrl", {
        get: function () {
            return encodeURIComponent(window.top.location.href);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IdleSessionActivityMonitor, "warnDialogPage", {
        get: function () {
            if (this._warnDialogPage === null) {
                this._warnDialogPage = this.GetIdleWarningUrl();
            }
            return this._warnDialogPage;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IdleSessionActivityMonitor, "signOutPage", {
        get: function () {
            if (this._signOutPage === null) {
                this._signOutPage = this.GetSignoutUrl();
            }
            return this._signOutPage;
        },
        enumerable: false,
        configurable: true
    });
    IdleSessionActivityMonitor.GetInstance = function () {
        if (IdleSessionActivityMonitor.instance == null) {
            IdleSessionActivityMonitor.instance = new IdleSessionActivityMonitor();
        }
        return IdleSessionActivityMonitor.instance;
    };
    IdleSessionActivityMonitor.Run = function () {
        if (this.ParseAbtCookie()) {
            this.RunABT();
        }
        else {
            IdleSessionActivityMonitor.GetInstance().topDocument.addEventListener("click", IdleSessionActivityMonitor.GetInstance().HandleClick);
            try {
                this.RunISSO();
            }
            catch (e) {
                if (e instanceof IssoCookieMissingError) {
                }
                else {
                    console.error(e);
                }
            }
        }
    };
    IdleSessionActivityMonitor.LogIssoActivity = function () {
        var instance = IdleSessionActivityMonitor.GetInstance();
        try {
            instance.InitializeSettingsFromCookie();
            instance.settings.Update();
            if (instance.settings.AreConsistent()) {
                instance.SetCookie(instance.settings.BuildCookieValue());
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    IdleSessionActivityMonitor.RunABT = function () {
        try {
            window.addEventListener('message', IdleSessionActivityMonitor.ConfirmAbtInitialization);
            window[this.shellKeyName].Abt.Init(this.abtParameters.timeout, this.abtParameters.signInState, this.abtParameters.sessionId);
            window.addEventListener('message', IdleSessionActivityMonitor.ProcessMessage);
        }
        catch (e) {
            console.error(e);
        }
    };
    IdleSessionActivityMonitor.ConfirmAbtInitialization = function (event) {
        if (event.data !== null) {
            var eventDetails = JSON.parse(event.data);
            if (eventDetails && this.abtInitializationEventId !== eventDetails.eventId) {
            }
            else if (eventDetails.detail.initializeResult !== true) {
                console.error("Failed to load ABT module");
            }
            else {
            }
        }
    };
    IdleSessionActivityMonitor.ProcessMessage = function (event) {
        if (event.data !== null) {
            var eventDetails = JSON.parse(event.data);
            if (eventDetails && this.abtEventIds.indexOf(eventDetails.eventId) > -1) {
                var signoutUrl = IdleSessionActivityMonitor.GetSignoutUrl();
                window.top.location.href = signoutUrl;
            }
        }
    };
    IdleSessionActivityMonitor.ParseAbtCookie = function () {
        var _this = this;
        var abtCookieValue = document.cookie
            .split(';')
            .map(function (c) { return c.trim(); })
            .filter(function (cookie) {
            return cookie.substring(0, _this.abtCookieName.length) === _this.abtCookieName;
        })
            .map(function (cookie) {
            return decodeURIComponent(cookie.substring(_this.abtCookieName.length + 1));
        })[0];
        try {
            abtCookieValue = atob(abtCookieValue);
            if (!abtCookieValue) {
                return false;
            }
            else {
                var parameters = abtCookieValue.split(',');
                if (parameters.length === 3) {
                    this.abtParameters = {
                        timeout: parameters[0],
                        signInState: parameters[1],
                        sessionId: parameters[2]
                    };
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        catch (e) {
            console.error(e);
            return false;
        }
    };
    IdleSessionActivityMonitor.RunISSO = function () {
        if (window.location.pathname.search("SignOut.aspx") != -1 ||
            window.location.pathname.search("IdleWarning.aspx") != -1) {
            return;
        }
        try {
            var waitTime = IdleSessionActivityMonitor.GetInstance().GetTimeToNextCheck();
            if (waitTime > 0) {
                window.setTimeout(IdleSessionActivityMonitor.RunISSO, waitTime);
            }
        }
        catch (e) {
            if (e instanceof IssoCookieMissingError) {
                console.error(e);
            }
            else {
                IdleSessionActivityMonitor.GetInstance().ForceSignOut();
            }
        }
    };
    IdleSessionActivityMonitor.GetDocumentOrigin = function () {
        var origin = "";
        if (!window.location.origin) {
            origin = window.location.protocol + "//" + window.location.hostname;
        }
        else {
            origin = window.location.origin;
        }
        return origin;
    };
    IdleSessionActivityMonitor.GetSignoutUrl = function () {
        var url = this.GetDocumentOrigin() + this.baseSignoutPath + this.EncodedSignBackInUrl;
        if (this.IsAppWebUrl()) {
            var safePath = this.GetAppWebSafePath();
            if (safePath) {
                url = this.GetDocumentOrigin() + safePath + this.baseSignoutPath + this.EncodedSignBackInUrl;
            }
            else {
                url = "";
            }
        }
        return url;
    };
    IdleSessionActivityMonitor.GetIdleWarningUrl = function () {
        var url = IdleSessionActivityMonitor.GetDocumentOrigin() + "/_layouts/15/IdleWarning.aspx";
        if (this.IsAppWebUrl()) {
            var safePath = this.GetAppWebSafePath();
            if (safePath) {
                url = IdleSessionActivityMonitor.GetDocumentOrigin() + safePath + "/_layouts/15/IdleWarning.aspx";
            }
            else {
                url = "";
            }
        }
        return url;
    };
    IdleSessionActivityMonitor.GetAppWebSafePath = function () {
        var path = null;
        if (typeof _spPageContextInfo !== 'undefined') {
            path = _spPageContextInfo.webServerRelativeUrl;
        }
        return path;
    };
    IdleSessionActivityMonitor.IsAppWebUrl = function () {
        var result = false;
        var domainPrefix = document.location.host.substring(0, document.location.host.indexOf("."));
        var idx = domainPrefix.indexOf("-");
        if (idx == -1) {
            return false;
        }
        var ids = domainPrefix.substring(idx + 1);
        if (ids.length == (this.MaxAppSiteDomainIdsChars + this.MaxAppWebDomainIdsChars) ||
            ids.length == this.MaxAppSiteDomainIdsChars) {
            result = this.ValidateStringIsHex(ids);
        }
        else {
            result = false;
        }
        return result;
    };
    IdleSessionActivityMonitor.ValidateStringIsHex = function (value) {
        if (!value) {
            return false;
        }
        var validChar = '0123456789ABCDEFabcdef';
        var strlen = value.length;
        if (strlen < 1) {
            return false;
        }
        for (var i = 0; i < strlen; i++) {
            if (validChar.indexOf(value.charAt(i)) < 0) {
                return false;
            }
        }
        return true;
    };
    IdleSessionActivityMonitor.prototype.GetTimeToNextCheck = function () {
        var currentTime = Date.now();
        this.InitializeSettingsFromCookie();
        if (currentTime > this.settings.SignOutAt) {
            this.ForceSignOut();
        }
        else if (currentTime > this.settings.WarnAt) {
            if (!this.warningVisible) {
                this.RenderWarning();
            }
        }
        else {
            if (this.warningVisible) {
                this.DismissWarning();
            }
        }
        this.nextCheck = Math.min(this.settings.WarnAfter, this.settings.SignOutAfter - this.settings.WarnAfter);
        return this.nextCheck;
    };
    IdleSessionActivityMonitor.prototype.ForceSignOut = function () {
        this.DeleteCookie();
        window.top.location.href = IdleSessionActivityMonitor.GetSignoutUrl();
    };
    IdleSessionActivityMonitor.prototype.DismissWarning = function () {
        var dialog = this.topDocument.getElementById(this.warnDialogId);
        dialog.style.display = "none";
        this.warningVisible = false;
        IdleSessionActivityMonitor.LogIssoActivity();
    };
    IdleSessionActivityMonitor.prototype.RenderWarning = function () {
        var dialog = this.topDocument.getElementById(this.warnDialogId);
        dialog.style.display = "block";
        var iframe = this.topDocument.getElementById(this.warnDialogIframeId);
        var height = iframe.contentWindow.document.body.scrollHeight + "px";
        iframe.style.height = height;
        this.warningVisible = true;
    };
    IdleSessionActivityMonitor.prototype.InitializeSettingsFromCookie = function () {
        this.settings = new IssoPolicySettings(this.GetCookieValue());
        if (!this.settings.AreConsistent()) {
            throw new Error();
        }
    };
    IdleSessionActivityMonitor.prototype.GetCookieValue = function () {
        var _this = this;
        var cookieValue = document.cookie
            .split(';')
            .map(function (c) { return c.trim(); })
            .filter(function (cookie) {
            return cookie.substring(0, _this.IssoCookieName.length) === _this.IssoCookieName;
        })
            .map(function (cookie) {
            return decodeURIComponent(cookie.substring(_this.IssoCookieName.length + 1));
        })[0] || null;
        if (typeof (cookieValue) == 'undefined' || cookieValue == null) {
            throw new IssoCookieMissingError();
        }
        cookieValue = atob(cookieValue);
        return cookieValue;
    };
    IdleSessionActivityMonitor.prototype.SetCookie = function (cookieValue) {
        cookieValue = btoa(cookieValue);
        var cookieString = this.IssoCookieName + "=" + cookieValue + "; domain=" + this.HostDomain + "; path=/; secure; ";
        document.cookie = cookieString;
    };
    IdleSessionActivityMonitor.prototype.DeleteCookie = function () {
        var cookieString = this.IssoCookieName + "=; domain=" + this.HostDomain + "; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; ";
        document.cookie = cookieString;
    };
    IdleSessionActivityMonitor.prototype.InitializeWarningDialog = function () {
        if (!!this.topDocument.getElementById(this.warnDialogId)) {
            return;
        }
        else if (IdleSessionActivityMonitor.warnDialogPage === "") {
            return;
        }
        var warningContainer = this.topDocument.createElement('div');
        var warningDiv = this.topDocument.createElement('div');
        var iframe = this.topDocument.createElement('iframe');
        warningContainer.style.display = "none";
        warningContainer.setAttribute('id', this.warnDialogId);
        iframe.setAttribute('id', this.warnDialogIframeId);
        iframe.setAttribute('src', IdleSessionActivityMonitor.warnDialogPage);
        iframe.setAttribute('scrolling', 'no');
        warningDiv.appendChild(iframe);
        warningContainer.appendChild(warningDiv);
        this.topDocument.body.insertBefore(warningContainer, this.topDocument.body.lastChild.nextSibling);
        warningContainer.style.top = "50%";
        warningContainer.style.left = "50%";
        warningContainer.style.zIndex = "9999";
        warningContainer.style.position = "absolute";
        warningDiv.style.marginLeft = "-170px";
        warningDiv.style.marginTop = "-200px";
        warningDiv.style.boxShadow = "0 0 5px 0 rgba(0,0,0,.4)";
        warningDiv.style.backgroundColor = "#ffffff";
        iframe.style.overflow = "hidden";
    };
    IdleSessionActivityMonitor.abtCookieName = 'spo_abt';
    IdleSessionActivityMonitor.shellKeyName = 'o365Shell';
    IdleSessionActivityMonitor.abtInitializationEventId = 'abtInitializeResult';
    IdleSessionActivityMonitor.abtEventIds = [
        'abtSignOutEventForHost',
        'abtSignOutEventForHistUserGenerated'
    ];
    IdleSessionActivityMonitor.baseSignoutPath = '/_layouts/15/SignOut.aspx?isso=true&returnUri=';
    IdleSessionActivityMonitor.instance = null;
    IdleSessionActivityMonitor._warnDialogPage = null;
    IdleSessionActivityMonitor._signOutPage = null;
    IdleSessionActivityMonitor.MaxAppSiteDomainIdsChars = 6;
    IdleSessionActivityMonitor.MaxAppWebDomainIdsChars = 8;
    return IdleSessionActivityMonitor;
}());
if (document.readyState === "complete") {
    IdleSessionActivityMonitor.Run();
}
else {
    document.addEventListener('readystatechange', function () {
        if (document.readyState === "complete") {
            IdleSessionActivityMonitor.Run();
        }
    });
}
//# sourceMappingURL=ActivityMonitor.js.map